[{"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\index.js":"1","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\serviceWorker.js":"2","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\App.js":"3","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\AppTop.js":"4","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\Toolbar.js":"5","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\LocoIcon.js":"6","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\LocoControl.js":"7","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\LocoSettings.js":"8","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\Smail.js":"9","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\Decoders.js":"10","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\layouts\\Layout.js":"11","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\Updates.js":"12"},{"size":550,"mtime":1607039617072,"results":"13","hashOfConfig":"14"},{"size":5086,"mtime":1585493811181,"results":"15","hashOfConfig":"14"},{"size":919,"mtime":1609201944746,"results":"16","hashOfConfig":"14"},{"size":12674,"mtime":1609187660800,"results":"17","hashOfConfig":"14"},{"size":2151,"mtime":1608478959507,"results":"18","hashOfConfig":"14"},{"size":4588,"mtime":1609193542586,"results":"19","hashOfConfig":"14"},{"size":19617,"mtime":1609203139137,"results":"20","hashOfConfig":"14"},{"size":9313,"mtime":1609184942314,"results":"21","hashOfConfig":"14"},{"size":1419,"mtime":1607185304972,"results":"22","hashOfConfig":"23"},{"size":5338,"mtime":1591976696546,"results":"24","hashOfConfig":"14"},{"size":12598,"mtime":1609187389382,"results":"25","hashOfConfig":"14"},{"size":4827,"mtime":1609201922694,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"2ph5od",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ppzhcl",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\index.js",[],["55","56"],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\serviceWorker.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\App.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\AppTop.js",["57","58","59","60","61"],"import React, { useEffect, useState } from 'react'\r\nimport Toolbar from \"./Toolbar\";\r\nimport LocoControl from \"./LocoControl\";\r\nimport LocoIcon from \"./LocoIcon\";\r\nimport LocoSettings from \"./LocoSettings\";\r\nimport { dcdr1 } from \"./Decoders\";\r\nimport Layout from '../layouts/Layout';\r\nimport { Route, Switch, useHistory } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst { ipcRenderer } = window.require('electron');\r\n\r\n\r\nexport default function AppTop() {\r\n    let history = useHistory()\r\n    const [state, setState] = useState({\r\n        selectedLoco: 0,\r\n        activeTrack: 0,\r\n        showAll: false,\r\n        locos: []\r\n    })\r\n\r\n    const defaultLoco = {\r\n        hidden: false,\r\n        name: 'Default Name',\r\n        number: 9999,\r\n        address: 9999,\r\n        model: 'Enter Model',\r\n        photo: 'default.jpg',\r\n        decoder: dcdr1(),\r\n        speed: 0,\r\n        functionState: [],\r\n        direction: 'stopped'\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let tempLocos = state.locos\r\n        for (var locoNum = 0; locoNum < state.locos.length; locoNum++) {\r\n\r\n            var tempFunState = []\r\n            for (var i = 0; i < 32; i++) {\r\n                tempFunState[i] = false\r\n            }\r\n\r\n            tempLocos[locoNum].functionState = tempFunState\r\n        }\r\n\r\n        ipcRenderer.on('locos', (e, theLocos) => {\r\n            console.log('Got Locos')\r\n            console.log(theLocos)\r\n            let tempState = { ...state }\r\n            tempState.locos = theLocos\r\n            setState(tempState)\r\n        })\r\n\r\n        ipcRenderer.send('getLocos')\r\n\r\n        let tempState = { ...state }\r\n        tempState.locos = tempLocos\r\n        setState(tempState)\r\n\r\n        ipcRenderer.on('addLoco', (event) => {\r\n            let tempState = { ...state }\r\n            tempState.locos.push(defaultLoco)\r\n            setState(tempState)\r\n        })\r\n\r\n        ipcRenderer.on('hereIsYourImage', (event, name) => {\r\n            var tempState = { ...state }\r\n            tempState.locos[state.selectedLoco].photo = name\r\n            setState(tempState)\r\n        })\r\n        return () => {\r\n            ipcRenderer.removeAllListeners('hereIsYourImage')\r\n            ipcRenderer.removeAllListeners('addLoco')\r\n        }\r\n    }, [])\r\n\r\n    /*\r\n        useEffect(() => {\r\n            console.log(state)\r\n        }, [state])\r\n    */\r\n\r\n    const setTrack = (track) => {\r\n        let tempState = { ...state }\r\n        tempState.activeTrack = track\r\n        setState(tempState)\r\n    }\r\n\r\n    const deleteLoco = (loco) => {\r\n        var tempState = { ...state }\r\n        tempState.locos.splice(loco, 1)\r\n\r\n        if (state.selectedLoco >= tempState.locos.length - 1) {\r\n            tempState.selectedLoco = tempState.locos.length - 1\r\n        }\r\n\r\n        if (tempState.locos.length === 0) {\r\n            tempState.locos.push(defaultLoco)\r\n            tempState.selectedLoco = 0\r\n            setState(tempState)\r\n            history.replace(\"/\")\r\n        } else {\r\n            history.replace(\"/\")\r\n        }\r\n    }\r\n\r\n    const selectLoco = (locoIndex) => {\r\n        console.log('IN SELECT LOCO ' + locoIndex)\r\n        let tempState = { ...state }\r\n        tempState.selectedLoco = locoIndex\r\n        setState(tempState)\r\n    }\r\n\r\n    const speedChange = (theSpeed) => {\r\n        var tempState = { ...state }\r\n\r\n        tempState.locos[state.selectedLoco].speed = theSpeed\r\n\r\n        setState(tempState)\r\n    }\r\n\r\n    const setFunction = (funNum, funVal) => {\r\n        console.log('Set Function ' + funNum + funVal)\r\n\r\n        var tempState = { ...state }\r\n\r\n        tempState.locos[state.selectedLoco].functionState[funNum] = funVal\r\n\r\n        setState(tempState)\r\n    }\r\n\r\n    const handleNameChange = (newName) => {\r\n        console.log('Name change in top ' + newName)\r\n        var tempState = { ...state }\r\n\r\n        tempState.locos[state.selectedLoco].name = newName\r\n\r\n        setState(tempState)\r\n    }\r\n\r\n    const handleModelChange = (newModel) => {\r\n        console.log('Model change in top ' + newModel)\r\n        var tempState = { ...state }\r\n\r\n        tempState.locos[state.selectedLoco].model = newModel\r\n\r\n        setState(tempState)\r\n    }\r\n\r\n    const handleNumberChange = (newNumber) => {\r\n        console.log('Name change in top ' + newNumber)\r\n        var tempState = { ...state }\r\n\r\n        tempState.locos[state.selectedLoco].number = newNumber\r\n\r\n        setState(tempState)\r\n    }\r\n\r\n    const handleAddressChange = (newAddress) => {\r\n        console.log('Name change in top ' + newAddress)\r\n        var tempState = { ...state }\r\n\r\n        tempState.locos[state.selectedLoco].address = newAddress\r\n\r\n        setState(tempState)\r\n    }\r\n\r\n    const handleVisible = () => {\r\n        let tempState = { ...state }\r\n\r\n        if (state.locos[state.selectedLoco].hidden) {\r\n            tempState.locos[state.selectedLoco].hidden = false\r\n        } else {\r\n            tempState.locos[state.selectedLoco].hidden = true\r\n        }\r\n\r\n        setState(tempState)\r\n    }\r\n\r\n    const handleToggleHidden = () => {\r\n        console.log('Toggle Hidden Locos')\r\n        let tempState = { ...state }\r\n        if (state.showAll) {\r\n            tempState.showAll = false\r\n            setState(tempState)\r\n        } else {\r\n            tempState.showAll = true\r\n            setState(tempState)\r\n        }\r\n    }\r\n\r\n    const handleDirectionChange = (direction) => {\r\n        var tempState = { ...state }\r\n\r\n        tempState.locos[state.selectedLoco].direction = direction\r\n\r\n        setState(tempState)\r\n    }\r\n\r\n    const handleSetAllStopped = () => {\r\n        var tempState = { ...state }\r\n\r\n        for (var i = 0; i < tempState.locos.length; i++) {\r\n            tempState.locos[i].direction = 'stopped'\r\n        }\r\n        setState(tempState)\r\n    }\r\n\r\n    const openSettings = (idx) => {\r\n        console.log('In Open Settings', idx)\r\n        let tempState = { ...state }\r\n        tempState.selectedLoco = idx\r\n        setState(tempState)\r\n        history.replace(\"/locoSettingsWindow\")\r\n    }\r\n\r\n    const openMain = () => {\r\n        let tempState = { ...state }\r\n        if (state.locos[state.selectedLoco].hidden) {\r\n            for (var count = 0; count < state.locos.length; count++) {\r\n                if (!state.locos[count].hidden) {\r\n                    tempState.selectedLoco = count\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        setState(tempState)\r\n        history.replace(\"/\")\r\n    }\r\n\r\n    const printState = () => {\r\n        console.log(state)\r\n    }\r\n\r\n    const makeLocoSettings = () => {\r\n        if (state.locos.length === 0) {\r\n            return\r\n        }\r\n        return (\r\n            <LocoSettings\r\n                visibility={handleVisible}\r\n                changeModel={handleModelChange}\r\n                changeAddress={handleAddressChange}\r\n                changeNumber={handleNumberChange}\r\n                changeName={handleNameChange}\r\n                hidden={state.locos[state.selectedLoco].hidden}\r\n                decoder={state.locos[state.selectedLoco].decoder}\r\n                loco={state.selectedLoco}\r\n                data={state.locos[state.selectedLoco]}\r\n                backToMain={openMain}\r\n                deleteLoco={deleteLoco}\r\n            />\r\n        )\r\n    }\r\n\r\n    const makeLocoControl = () => {\r\n        if (state.locos.length === 0) {\r\n            return\r\n        }\r\n        return (\r\n            <LocoControl\r\n                setFunction={setFunction}\r\n                speedChange={speedChange}\r\n                changeDirection={handleDirectionChange}\r\n                loco={state.locos[state.selectedLoco]}\r\n            />\r\n        )\r\n    }\r\n\r\n    const makeLocoIcons = () => {\r\n        let locoIcons = []\r\n        //console.log('START')\r\n        //console.log(locoIcons.length)\r\n        //console.log(locoIcons)\r\n\r\n        for (var i = 0; i < state.locos.length; i++) {\r\n            //console.log('Look Here ' + i)\r\n\r\n            var color = 'lightgrey'\r\n            if (i === state.selectedLoco) {\r\n                color = '#3498DB'\r\n            }\r\n\r\n            if (state.locos[i].hidden) {\r\n                color = '#D98880'\r\n            }\r\n\r\n            var tempKey = \"LocoIcon\" + i\r\n\r\n            if (!state.locos[i].hidden || state.showAll) {\r\n                locoIcons.push(\r\n                    <div key={tempKey} name=\"LocoSlot\" style={{ display: 'inline-block' }}>\r\n                        <LocoIcon\r\n                            openSettings={openSettings}\r\n                            loco={state.locos[i]}\r\n                            numberOfLocos={state.locos.length - 1}\r\n                            index={i}\r\n                            selected={selectLoco}\r\n                            color={color}\r\n                        />\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        let btnLbl\r\n\r\n        if (state.showAll) {\r\n            btnLbl = \"Hide Locos\"\r\n        } else {\r\n            btnLbl = \"Show All Locos\"\r\n        }\r\n\r\n        var isOneHidden = false\r\n        for (var locoCnt = 0; locoCnt < state.locos.length; locoCnt++) {\r\n            if (state.locos[locoCnt].hidden) {\r\n                isOneHidden = true\r\n                break\r\n            }\r\n        }\r\n\r\n        if (isOneHidden) {\r\n            locoIcons.push(\r\n                <div key=\"Show/HideButton\" name=\"showHideBtn\" style={{ display: 'inline-block' }}>\r\n                    <div style={{\r\n                        backgroundColor: 'white',\r\n                        height: '118px',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        textAlign: 'center',\r\n                        fontSize: '12px',\r\n                        padding: '0px 10px',\r\n                        cursor: 'context-menu',\r\n                        borderRadius: '5px'\r\n                    }}\r\n                        onMouseDown={handleToggleHidden}\r\n                    >\r\n                        <div>\r\n                            {btnLbl}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return locoIcons\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ height: '100vh', width: '100vw', display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\r\n            <div><Toolbar locos={state.locos} setAllStopped={handleSetAllStopped} /></div>\r\n            <div style={{ height: '100%', maxHeight: '100%', overflow: 'hidden' }}>\r\n                <div style={{ height: '100%', width: '100%', maxWidth: '100%', maxHeight: '100%', display: 'flex', overflow: 'hidden' }}>\r\n                    <div style={{ width: '250px', minWidth: '250px', maxWidth: '250px' }}>{makeLocoControl()}</div>\r\n                    <div style={{ width: '100%', maxWidth: '100%', overflow: 'hidden' }}>\r\n                        <Switch>\r\n                            <Route path=\"/locoSettingsWindow\">{makeLocoSettings()}</Route>\r\n                            <Route>\r\n                                <div style={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\r\n                                    <div\r\n                                        style={{\r\n                                            backgroundColor: '#7B7D7D',\r\n                                            maxWidth: '100%',\r\n                                            width: '100%',\r\n                                            height: '140px',\r\n                                            minHeight: '140px',\r\n                                            display: 'flex',\r\n                                            overflow: 'hidden',\r\n                                            overflowX: 'auto',\r\n                                        }}\r\n                                    >\r\n                                        {makeLocoIcons()}\r\n                                    </div>\r\n                                    <div style={{ height: '100%', width: '100%', maxWidth: '100%', display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\r\n                                        <Layout activeTrack={state.activeTrack} setActiveTrack={setTrack} />\r\n                                    </div>\r\n                                </div>\r\n                            </Route>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst locoControl = {\r\n    backgroundColor: 'grey',\r\n    width: '250px',\r\n}\r\n\r\nconst toolBar = {\r\n    backgroundColor: 'orange',\r\n}","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\Toolbar.js",["62"],"import React, { useEffect } from 'react'\r\n\r\nconst { ipcRenderer } = window.require('electron')\r\n\r\nexport default function Toolbar(props) {\r\n    useEffect(() => {\r\n        ipcRenderer.on('eStopAll', (event) => {\r\n            estop()\r\n        })\r\n\r\n        return () => {\r\n            ipcRenderer.removeAllListeners('eStopAll')\r\n        }\r\n    }, [])\r\n\r\n    const estop = () => {\r\n        console.log('E Stop All')\r\n        for (var i = 0; i < props.locos.length; i++) {\r\n            var addy = getAddressBytes(props.locos[i].address)\r\n            ipcRenderer.send('send-serial', [0xA2, addy[0], addy[1], 5, 0])\r\n        }\r\n\r\n        props.setAllStopped()\r\n    }\r\n\r\n    const getAddressBytes = (addy) => {\r\n        var address = addy\r\n\r\n        console.log(\"Address = \" + address)\r\n\r\n        var lowByte = address & 0xff\r\n        var highByte = (address >> 8) & 0xff\r\n        var highBytex = highByte | 0xC0\r\n\r\n        let output = [highBytex, lowByte]\r\n\r\n        return output\r\n    }\r\n\r\n    return (\r\n        <div style={barStyle}>\r\n            <div\r\n                style={{\r\n                    backgroundColor: 'red',\r\n                    display: 'inline-block',\r\n                    padding: '5px 15px',\r\n                    borderRadius: '5px',\r\n                    cursor: 'pointer',\r\n                    marginRight: '10px'\r\n                }}\r\n                onMouseDown={() => estop()}\r\n            >\r\n                <b>E-STOP ALL</b>\r\n            </div>\r\n            <div style={{ display: 'inline-block', backgroundColor: 'lightGrey' }}>\r\n                <table cellPadding=\"4\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Serial Port: </td>\r\n                            <td>\r\n                                <select>\r\n                                    <option>COM16</option>\r\n                                </select>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst barStyle = {\r\n    backgroundColor: 'darkGrey',\r\n    padding: '3px',\r\n    display: 'flex'\r\n}","C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\LocoIcon.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\LocoControl.js",["63"],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\LocoSettings.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\Smail.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\Decoders.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\layouts\\Layout.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\react\\dcc\\src\\components\\Updates.js",["64"],"import React, { useEffect, useState } from 'react'\r\nconst { ipcRenderer } = window.require('electron')\r\n\r\nexport default function Updates() {\r\n    const [show, setShow] = useState(false)\r\n    const [popupContents, setPopupContents] = useState({\r\n        contents: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log('Top Of Updates')\r\n        ipcRenderer.on('checkingForUpdates', () => {\r\n            console.log('Checking for updates')\r\n        })\r\n\r\n        ipcRenderer.on('updateAvailable', () => {\r\n            console.log('Downloading update')\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    A new version is being downloaded\r\n                    <table style={{ width: '100%' }}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <progress style={{ width: '100%' }} max={100} value=\"0\" />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setShow(false)}>close</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n\r\n            setPopupContents(tempPopupContents)\r\n            setShow(true)\r\n        })\r\n\r\n        ipcRenderer.on('noUpdate', () => {\r\n            console.log('Up to date')\r\n        })\r\n\r\n        ipcRenderer.on('updateDownloaded', (e, releaseInfo) => {\r\n            console.log('Update Downloaded')\r\n            //console.log(releaseInfo)\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    <p>New update {\"v\" + releaseInfo.version} downloaded</p>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setPopupContents()}>Update on exit</button>\r\n                                </td>\r\n                                <td>\r\n                                    <button onClick={() => {\r\n                                        ipcRenderer.send('installUpdate')\r\n                                        setShow(false)\r\n                                    }}>Update and restart app now</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n\r\n            setPopupContents(tempPopupContents)\r\n            setShow(true)\r\n        })\r\n\r\n        ipcRenderer.on('updateError', (error) => {\r\n            console.log('Update Error', error,)\r\n        })\r\n\r\n        ipcRenderer.on('updateDownloadProgress', (e, progressPercent) => {\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    A new version is being downloaded\r\n                    <table style={{ width: '100%' }}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <progress style={{ width: '100%' }} max=\"100\" value={Math.round(progressPercent).toString()} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setShow(false)}>hide</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n            setPopupContents(tempPopupContents)\r\n        })\r\n\r\n        return () => {\r\n            ipcRenderer.removeAllListeners('checkingForUpdates')\r\n            ipcRenderer.removeAllListeners('updateAvailable')\r\n            ipcRenderer.removeAllListeners('noUpdate')\r\n            ipcRenderer.removeAllListeners('updateError')\r\n            ipcRenderer.removeAllListeners('updateDownloaded')\r\n            ipcRenderer.removeAllListeners('updateDownloadProgress')\r\n        }\r\n    }, [])\r\n\r\n    const makePopup = () => {\r\n        if (show === true) {\r\n            return (\r\n                <div style={{ position: 'fixed', bottom: '10px', right: '10px', backgroundColor: 'white', padding: '10px', boxShadow: '0px 0px 6px 2px', fontSize: '12px' }}>\r\n                    {popupContents.contents}\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        makePopup()\r\n    )\r\n}\r\n",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":9,"column":10,"nodeType":"71","messageId":"72","endLine":9,"endColumn":16},{"ruleId":"73","severity":1,"message":"74","line":78,"column":8,"nodeType":"75","endLine":78,"endColumn":10,"suggestions":"76"},{"ruleId":"69","severity":1,"message":"77","line":234,"column":11,"nodeType":"71","messageId":"72","endLine":234,"endColumn":21},{"ruleId":"69","severity":1,"message":"78","line":395,"column":7,"nodeType":"71","messageId":"72","endLine":395,"endColumn":18},{"ruleId":"69","severity":1,"message":"79","line":400,"column":7,"nodeType":"71","messageId":"72","endLine":400,"endColumn":14},{"ruleId":"73","severity":1,"message":"80","line":14,"column":8,"nodeType":"75","endLine":14,"endColumn":10,"suggestions":"81"},{"ruleId":"73","severity":1,"message":"80","line":16,"column":8,"nodeType":"75","endLine":16,"endColumn":10,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"83","line":112,"column":8,"nodeType":"75","endLine":112,"endColumn":10,"suggestions":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'defaultLoco' and 'state'. Either include them or remove the dependency array.","ArrayExpression",["87"],"'printState' is assigned a value but never used.","'locoControl' is assigned a value but never used.","'toolBar' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'estop'. Either include it or remove the dependency array.",["88"],["89"],"React Hook useEffect has a missing dependency: 'popupContents'. Either include it or remove the dependency array.",["90"],"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"93","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [defaultLoco, state]",{"range":"98","text":"99"},"Update the dependencies array to be: [estop]",{"range":"100","text":"101"},{"range":"102","text":"101"},"Update the dependencies array to be: [popupContents]",{"range":"103","text":"104"},[2274,2276],"[defaultLoco, state]",[345,347],"[estop]",[430,432],[4362,4364],"[popupContents]"]